pipeline {
    agent any

    parameters {
        // GitHub  사용자명 입력
        string(name: 'GITHUB_USERNAME',  defaultValue: '', description: 'GitHub  사용자명을 입력하세요.')
    }

    environment {
        // 전역값을 넣어 두시면 위 parameters 입력이 필요 없어요. (전체 Jenkinfile에서 해당 내용을 모두 수정해 놓으면 좋습니다.)
        // GITHUB_USERNAME = ""

        // 아래 부분 수정(x)
        GITHUB_URL = "https://github.com/${GITHUB_USERNAME}/cicdtest.git"
        CLASS_NUM = '2213'
    }

    stages {
        stage('Username 확인') {
            steps {
                script {
                    if (!env.GITHUB_USERNAME?.trim()) {
                        error "[파라미터와 함께 빌드]에 GITHUB_USERNAME를 본인의 username으로 입력해 주세요! 매번 입력이 번거롭다면 Jenkinsfile에서 parameters에 입력 항목을 삭제 하시고 environment에 전역값을 넣은 후 해당 조건문은 삭제해 주세요. "
                    }
                }
            }
        }
	    
        stage('쿠버네티스 Blue배포') {
            steps {
                sh "kubectl apply -f ./${CLASS_NUM}/blue/namespace.yaml"
                sh "kubectl apply -f ./${CLASS_NUM}/blue/configmap.yaml"
                sh "kubectl apply -f ./${CLASS_NUM}/blue/secret.yaml"
                sh "kubectl apply -f ./${CLASS_NUM}/blue/service.yaml"
                sh "kubectl apply -f ./${CLASS_NUM}/blue/deployment.yaml"
            }
        }

       // input 
       // - id : 외부 처리시 식별자로 사용될 인자	    
       // - message: "string"        버튼에 출력되는 글자를 지정한다 
       // - ok : "string:            다음 단계로 진행할 버튼을 띄우고 버튼의 label 은 "string" 이다. 
       //                            진행하지 않을 때 클릭할 "Abort" 라는 버튼도 같이 출력된다. 
       stage('배포 시작') {
            steps {
		// 사용자로 부터 빌드중에 입력을 받는다. 
		// - "수동배포"는 입력박스의 이름이다.
		// - "계속" 이라는 버튼과 "Abort" 라는 버튼이 보인다   
                input message: '수동배포 시작', ok: "계속" 
            }
        }

        stage('쿠버네티스 Green배포') {
            steps {
	        sh "kubectl apply -f ./${CLASS_NUM}/green/deployment.yaml"
                sh "kubectl apply -f ./${CLASS_NUM}/green/service.yaml"
            }
        }

	// input 의 parameter 
        // - message : 입력 버튼에 출력되는 글자를 지정한다. 
	// - 타입 : 아래의 예제는 booleanParam을 받겠다는 의미임 
	// - name : 버튼의 이름을 지정한다.
	// - defaultValue : 입력되는 값이 없을 경우 세팅되는 기본값이다.
	// - dscription : 설명문이다. 

        // parmeters
	// - string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        // - text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        // - booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        // - choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
        // - password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
	    
        stage('전환여부 확인') {
            steps {
                script {
	            // - "IS_SWITCH" 라는 체크박스가 띄어진다. 즉 이 체크박스를 선택하면 true가 리턴되고 그렇지 않으면 false가 리턴된다. 
	            // - 아울러 "Green 전환 ?" 이라는 입력버튼 박스를 통해 계속 진행여부를 체크하게 된다. 
                    returnValue = input message: 'Green 전환?', ok: "Yes", parameters: [booleanParam(name: 'IS_SWITCHED', defaultValue: true)]
                    // IS_SWITCH 가 true 값을 가지게 되면 아래와 같은 작업을 실행한다. 
		    if (returnValue) {
                        sh "kubectl patch -n anotherclass-221 svc api-tester -p '{\"spec\": {\"selector\": {\"blue-green-no\": \"2\"}}}'"
                    }
                }
            }
        }

        stage('롤백 확인') {
            steps {
		// - choices: ['done', 'rollback'] 은 콤보박스를 출력하여 사용자로 하여금 하나를 고르게 한다.     
                script {
                    returnValue = input message: 'Blue 롤백?', parameters: [choice(choices: ['done', 'rollback'], name: 'IS_ROLLBACk')]
                    if (returnValue == "done") {
                        sh "kubectl delete -f ./${CLASS_NUM}/blue/deployment.yaml"
                        sh "kubectl delete -f ./${CLASS_NUM}/green/service.yaml"
                        sh "kubectl patch -n anotherclass-221 svc api-tester -p '{\"metadata\": {\"labels\": {\"version\": \"2.0.0\"}}}'"
                        sh "kubectl patch -n anotherclass-221 cm api-tester-properties -p '{\"metadata\": {\"labels\": {\"version\": \"2.0.0\"}}}'"
                        sh "kubectl patch -n anotherclass-221 secret api-tester-postgresql -p '{\"metadata\": {\"labels\": {\"version\": \"2.0.0\"}}}'"
                    }
                    if (returnValue == "rollback") {
                        sh "kubectl patch -n anotherclass-221 svc api-tester -p '{\"spec\": {\"selector\": {\"blue-green-no\": \"1\"}}}'"
                    }
                }
            }
        }
    }
}
